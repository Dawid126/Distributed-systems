/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package serialization;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-07")
public class ComplexStruct implements org.apache.thrift.TBase<ComplexStruct, ComplexStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ComplexStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComplexStruct");

  private static final org.apache.thrift.protocol.TField NESTED_STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nestedStructList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField INTEGER_TO_NESTED_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("integerToNestedStruct", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComplexStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComplexStructTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<NestedStruct> nestedStructList; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,NestedStruct> integerToNestedStruct; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NESTED_STRUCT_LIST((short)1, "nestedStructList"),
    INTEGER_TO_NESTED_STRUCT((short)2, "integerToNestedStruct");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NESTED_STRUCT_LIST
          return NESTED_STRUCT_LIST;
        case 2: // INTEGER_TO_NESTED_STRUCT
          return INTEGER_TO_NESTED_STRUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NESTED_STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("nestedStructList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NestedStruct.class))));
    tmpMap.put(_Fields.INTEGER_TO_NESTED_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("integerToNestedStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NestedStruct.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComplexStruct.class, metaDataMap);
  }

  public ComplexStruct() {
  }

  public ComplexStruct(
    java.util.List<NestedStruct> nestedStructList,
    java.util.Map<java.lang.Integer,NestedStruct> integerToNestedStruct)
  {
    this();
    this.nestedStructList = nestedStructList;
    this.integerToNestedStruct = integerToNestedStruct;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComplexStruct(ComplexStruct other) {
    if (other.isSetNestedStructList()) {
      java.util.List<NestedStruct> __this__nestedStructList = new java.util.ArrayList<NestedStruct>(other.nestedStructList.size());
      for (NestedStruct other_element : other.nestedStructList) {
        __this__nestedStructList.add(new NestedStruct(other_element));
      }
      this.nestedStructList = __this__nestedStructList;
    }
    if (other.isSetIntegerToNestedStruct()) {
      java.util.Map<java.lang.Integer,NestedStruct> __this__integerToNestedStruct = new java.util.HashMap<java.lang.Integer,NestedStruct>(other.integerToNestedStruct.size());
      for (java.util.Map.Entry<java.lang.Integer, NestedStruct> other_element : other.integerToNestedStruct.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        NestedStruct other_element_value = other_element.getValue();

        java.lang.Integer __this__integerToNestedStruct_copy_key = other_element_key;

        NestedStruct __this__integerToNestedStruct_copy_value = new NestedStruct(other_element_value);

        __this__integerToNestedStruct.put(__this__integerToNestedStruct_copy_key, __this__integerToNestedStruct_copy_value);
      }
      this.integerToNestedStruct = __this__integerToNestedStruct;
    }
  }

  public ComplexStruct deepCopy() {
    return new ComplexStruct(this);
  }

  @Override
  public void clear() {
    this.nestedStructList = null;
    this.integerToNestedStruct = null;
  }

  public int getNestedStructListSize() {
    return (this.nestedStructList == null) ? 0 : this.nestedStructList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<NestedStruct> getNestedStructListIterator() {
    return (this.nestedStructList == null) ? null : this.nestedStructList.iterator();
  }

  public void addToNestedStructList(NestedStruct elem) {
    if (this.nestedStructList == null) {
      this.nestedStructList = new java.util.ArrayList<NestedStruct>();
    }
    this.nestedStructList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<NestedStruct> getNestedStructList() {
    return this.nestedStructList;
  }

  public ComplexStruct setNestedStructList(@org.apache.thrift.annotation.Nullable java.util.List<NestedStruct> nestedStructList) {
    this.nestedStructList = nestedStructList;
    return this;
  }

  public void unsetNestedStructList() {
    this.nestedStructList = null;
  }

  /** Returns true if field nestedStructList is set (has been assigned a value) and false otherwise */
  public boolean isSetNestedStructList() {
    return this.nestedStructList != null;
  }

  public void setNestedStructListIsSet(boolean value) {
    if (!value) {
      this.nestedStructList = null;
    }
  }

  public int getIntegerToNestedStructSize() {
    return (this.integerToNestedStruct == null) ? 0 : this.integerToNestedStruct.size();
  }

  public void putToIntegerToNestedStruct(int key, NestedStruct val) {
    if (this.integerToNestedStruct == null) {
      this.integerToNestedStruct = new java.util.HashMap<java.lang.Integer,NestedStruct>();
    }
    this.integerToNestedStruct.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,NestedStruct> getIntegerToNestedStruct() {
    return this.integerToNestedStruct;
  }

  public ComplexStruct setIntegerToNestedStruct(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,NestedStruct> integerToNestedStruct) {
    this.integerToNestedStruct = integerToNestedStruct;
    return this;
  }

  public void unsetIntegerToNestedStruct() {
    this.integerToNestedStruct = null;
  }

  /** Returns true if field integerToNestedStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerToNestedStruct() {
    return this.integerToNestedStruct != null;
  }

  public void setIntegerToNestedStructIsSet(boolean value) {
    if (!value) {
      this.integerToNestedStruct = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NESTED_STRUCT_LIST:
      if (value == null) {
        unsetNestedStructList();
      } else {
        setNestedStructList((java.util.List<NestedStruct>)value);
      }
      break;

    case INTEGER_TO_NESTED_STRUCT:
      if (value == null) {
        unsetIntegerToNestedStruct();
      } else {
        setIntegerToNestedStruct((java.util.Map<java.lang.Integer,NestedStruct>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NESTED_STRUCT_LIST:
      return getNestedStructList();

    case INTEGER_TO_NESTED_STRUCT:
      return getIntegerToNestedStruct();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NESTED_STRUCT_LIST:
      return isSetNestedStructList();
    case INTEGER_TO_NESTED_STRUCT:
      return isSetIntegerToNestedStruct();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ComplexStruct)
      return this.equals((ComplexStruct)that);
    return false;
  }

  public boolean equals(ComplexStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nestedStructList = true && this.isSetNestedStructList();
    boolean that_present_nestedStructList = true && that.isSetNestedStructList();
    if (this_present_nestedStructList || that_present_nestedStructList) {
      if (!(this_present_nestedStructList && that_present_nestedStructList))
        return false;
      if (!this.nestedStructList.equals(that.nestedStructList))
        return false;
    }

    boolean this_present_integerToNestedStruct = true && this.isSetIntegerToNestedStruct();
    boolean that_present_integerToNestedStruct = true && that.isSetIntegerToNestedStruct();
    if (this_present_integerToNestedStruct || that_present_integerToNestedStruct) {
      if (!(this_present_integerToNestedStruct && that_present_integerToNestedStruct))
        return false;
      if (!this.integerToNestedStruct.equals(that.integerToNestedStruct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNestedStructList()) ? 131071 : 524287);
    if (isSetNestedStructList())
      hashCode = hashCode * 8191 + nestedStructList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerToNestedStruct()) ? 131071 : 524287);
    if (isSetIntegerToNestedStruct())
      hashCode = hashCode * 8191 + integerToNestedStruct.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ComplexStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNestedStructList(), other.isSetNestedStructList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNestedStructList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nestedStructList, other.nestedStructList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntegerToNestedStruct(), other.isSetIntegerToNestedStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerToNestedStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerToNestedStruct, other.integerToNestedStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ComplexStruct(");
    boolean first = true;

    sb.append("nestedStructList:");
    if (this.nestedStructList == null) {
      sb.append("null");
    } else {
      sb.append(this.nestedStructList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("integerToNestedStruct:");
    if (this.integerToNestedStruct == null) {
      sb.append("null");
    } else {
      sb.append(this.integerToNestedStruct);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComplexStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComplexStructStandardScheme getScheme() {
      return new ComplexStructStandardScheme();
    }
  }

  private static class ComplexStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComplexStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComplexStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NESTED_STRUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.nestedStructList = new java.util.ArrayList<NestedStruct>(_list34.size);
                @org.apache.thrift.annotation.Nullable NestedStruct _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new NestedStruct();
                  _elem35.read(iprot);
                  struct.nestedStructList.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setNestedStructListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTEGER_TO_NESTED_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
                struct.integerToNestedStruct = new java.util.HashMap<java.lang.Integer,NestedStruct>(2*_map37.size);
                int _key38;
                @org.apache.thrift.annotation.Nullable NestedStruct _val39;
                for (int _i40 = 0; _i40 < _map37.size; ++_i40)
                {
                  _key38 = iprot.readI32();
                  _val39 = new NestedStruct();
                  _val39.read(iprot);
                  struct.integerToNestedStruct.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setIntegerToNestedStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComplexStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nestedStructList != null) {
        oprot.writeFieldBegin(NESTED_STRUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nestedStructList.size()));
          for (NestedStruct _iter41 : struct.nestedStructList)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.integerToNestedStruct != null) {
        oprot.writeFieldBegin(INTEGER_TO_NESTED_STRUCT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.integerToNestedStruct.size()));
          for (java.util.Map.Entry<java.lang.Integer, NestedStruct> _iter42 : struct.integerToNestedStruct.entrySet())
          {
            oprot.writeI32(_iter42.getKey());
            _iter42.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComplexStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComplexStructTupleScheme getScheme() {
      return new ComplexStructTupleScheme();
    }
  }

  private static class ComplexStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComplexStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComplexStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNestedStructList()) {
        optionals.set(0);
      }
      if (struct.isSetIntegerToNestedStruct()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNestedStructList()) {
        {
          oprot.writeI32(struct.nestedStructList.size());
          for (NestedStruct _iter43 : struct.nestedStructList)
          {
            _iter43.write(oprot);
          }
        }
      }
      if (struct.isSetIntegerToNestedStruct()) {
        {
          oprot.writeI32(struct.integerToNestedStruct.size());
          for (java.util.Map.Entry<java.lang.Integer, NestedStruct> _iter44 : struct.integerToNestedStruct.entrySet())
          {
            oprot.writeI32(_iter44.getKey());
            _iter44.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComplexStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
          struct.nestedStructList = new java.util.ArrayList<NestedStruct>(_list45.size);
          @org.apache.thrift.annotation.Nullable NestedStruct _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new NestedStruct();
            _elem46.read(iprot);
            struct.nestedStructList.add(_elem46);
          }
        }
        struct.setNestedStructListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
          struct.integerToNestedStruct = new java.util.HashMap<java.lang.Integer,NestedStruct>(2*_map48.size);
          int _key49;
          @org.apache.thrift.annotation.Nullable NestedStruct _val50;
          for (int _i51 = 0; _i51 < _map48.size; ++_i51)
          {
            _key49 = iprot.readI32();
            _val50 = new NestedStruct();
            _val50.read(iprot);
            struct.integerToNestedStruct.put(_key49, _val50);
          }
        }
        struct.setIntegerToNestedStructIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

